// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REPOSSCHEMA_REPOS_H_
#define FLATBUFFERS_GENERATED_REPOSSCHEMA_REPOS_H_

#include "flatbuffers/flatbuffers.h"

namespace Repos {

struct ReposList;

struct Repo;

struct User;

struct ReposList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REPOS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Repo>> *repos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Repo>> *>(VT_REPOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REPOS) &&
           verifier.Verify(repos()) &&
           verifier.VerifyVectorOfTables(repos()) &&
           verifier.EndTable();
  }
};

struct ReposListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_repos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Repo>>> repos) {
    fbb_.AddOffset(ReposList::VT_REPOS, repos);
  }
  explicit ReposListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReposListBuilder &operator=(const ReposListBuilder &);
  flatbuffers::Offset<ReposList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReposList>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReposList> CreateReposList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Repo>>> repos = 0) {
  ReposListBuilder builder_(_fbb);
  builder_.add_repos(repos);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReposList> CreateReposListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Repo>> *repos = nullptr) {
  return Repos::CreateReposList(
      _fbb,
      repos ? _fbb.CreateVector<flatbuffers::Offset<Repo>>(*repos) : 0);
}

struct Repo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_FULL_NAME = 8,
    VT_OWNER = 10,
    VT_HTML_URL = 12,
    VT_DESCRIPTION = 14,
    VT_FORK = 16,
    VT_URL = 18,
    VT_CREATED_AT = 20,
    VT_UPDATED_AT = 22,
    VT_PUSHED_AT = 24,
    VT_GIT_URL = 26,
    VT_SSH_URL = 28,
    VT_CLONE_URL = 30,
    VT_SVN_URL = 32,
    VT_HOMEPAGE = 34,
    VT_SIZE = 36,
    VT_STARGAZERS_COUNT = 38,
    VT_WATCHERS_COUNT = 40,
    VT_LANGUAGE = 42,
    VT_HAS_ISSUES = 44,
    VT_HAS_DOWNLOADS = 46,
    VT_HAS_WIKI = 48,
    VT_HAS_PAGES = 50,
    VT_FORKS_COUNT = 52,
    VT_MIRROR_URL = 54,
    VT_OPEN_ISSUES_COUNT = 56,
    VT_FORKS = 58,
    VT_OPEN_ISSUES = 60,
    VT_WATCHERS = 62,
    VT_DEFAULT_BRANCH = 64
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *full_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FULL_NAME);
  }
  const User *owner() const {
    return GetPointer<const User *>(VT_OWNER);
  }
  const flatbuffers::String *html_url() const {
    return GetPointer<const flatbuffers::String *>(VT_HTML_URL);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool fork() const {
    return GetField<uint8_t>(VT_FORK, 0) != 0;
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  const flatbuffers::String *created_at() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATED_AT);
  }
  const flatbuffers::String *updated_at() const {
    return GetPointer<const flatbuffers::String *>(VT_UPDATED_AT);
  }
  const flatbuffers::String *pushed_at() const {
    return GetPointer<const flatbuffers::String *>(VT_PUSHED_AT);
  }
  const flatbuffers::String *git_url() const {
    return GetPointer<const flatbuffers::String *>(VT_GIT_URL);
  }
  const flatbuffers::String *ssh_url() const {
    return GetPointer<const flatbuffers::String *>(VT_SSH_URL);
  }
  const flatbuffers::String *clone_url() const {
    return GetPointer<const flatbuffers::String *>(VT_CLONE_URL);
  }
  const flatbuffers::String *svn_url() const {
    return GetPointer<const flatbuffers::String *>(VT_SVN_URL);
  }
  const flatbuffers::String *homepage() const {
    return GetPointer<const flatbuffers::String *>(VT_HOMEPAGE);
  }
  int64_t size() const {
    return GetField<int64_t>(VT_SIZE, 0);
  }
  int32_t stargazers_count() const {
    return GetField<int32_t>(VT_STARGAZERS_COUNT, 0);
  }
  int32_t watchers_count() const {
    return GetField<int32_t>(VT_WATCHERS_COUNT, 0);
  }
  const flatbuffers::String *language() const {
    return GetPointer<const flatbuffers::String *>(VT_LANGUAGE);
  }
  bool has_issues() const {
    return GetField<uint8_t>(VT_HAS_ISSUES, 0) != 0;
  }
  bool has_downloads() const {
    return GetField<uint8_t>(VT_HAS_DOWNLOADS, 0) != 0;
  }
  bool has_wiki() const {
    return GetField<uint8_t>(VT_HAS_WIKI, 0) != 0;
  }
  bool has_pages() const {
    return GetField<uint8_t>(VT_HAS_PAGES, 0) != 0;
  }
  int32_t forks_count() const {
    return GetField<int32_t>(VT_FORKS_COUNT, 0);
  }
  const flatbuffers::String *mirror_url() const {
    return GetPointer<const flatbuffers::String *>(VT_MIRROR_URL);
  }
  int32_t open_issues_count() const {
    return GetField<int32_t>(VT_OPEN_ISSUES_COUNT, 0);
  }
  int32_t forks() const {
    return GetField<int32_t>(VT_FORKS, 0);
  }
  int32_t open_issues() const {
    return GetField<int32_t>(VT_OPEN_ISSUES, 0);
  }
  int32_t watchers() const {
    return GetField<int32_t>(VT_WATCHERS, 0);
  }
  const flatbuffers::String *default_branch() const {
    return GetPointer<const flatbuffers::String *>(VT_DEFAULT_BRANCH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_FULL_NAME) &&
           verifier.Verify(full_name()) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyTable(owner()) &&
           VerifyOffset(verifier, VT_HTML_URL) &&
           verifier.Verify(html_url()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.Verify(description()) &&
           VerifyField<uint8_t>(verifier, VT_FORK) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.Verify(url()) &&
           VerifyOffset(verifier, VT_CREATED_AT) &&
           verifier.Verify(created_at()) &&
           VerifyOffset(verifier, VT_UPDATED_AT) &&
           verifier.Verify(updated_at()) &&
           VerifyOffset(verifier, VT_PUSHED_AT) &&
           verifier.Verify(pushed_at()) &&
           VerifyOffset(verifier, VT_GIT_URL) &&
           verifier.Verify(git_url()) &&
           VerifyOffset(verifier, VT_SSH_URL) &&
           verifier.Verify(ssh_url()) &&
           VerifyOffset(verifier, VT_CLONE_URL) &&
           verifier.Verify(clone_url()) &&
           VerifyOffset(verifier, VT_SVN_URL) &&
           verifier.Verify(svn_url()) &&
           VerifyOffset(verifier, VT_HOMEPAGE) &&
           verifier.Verify(homepage()) &&
           VerifyField<int64_t>(verifier, VT_SIZE) &&
           VerifyField<int32_t>(verifier, VT_STARGAZERS_COUNT) &&
           VerifyField<int32_t>(verifier, VT_WATCHERS_COUNT) &&
           VerifyOffset(verifier, VT_LANGUAGE) &&
           verifier.Verify(language()) &&
           VerifyField<uint8_t>(verifier, VT_HAS_ISSUES) &&
           VerifyField<uint8_t>(verifier, VT_HAS_DOWNLOADS) &&
           VerifyField<uint8_t>(verifier, VT_HAS_WIKI) &&
           VerifyField<uint8_t>(verifier, VT_HAS_PAGES) &&
           VerifyField<int32_t>(verifier, VT_FORKS_COUNT) &&
           VerifyOffset(verifier, VT_MIRROR_URL) &&
           verifier.Verify(mirror_url()) &&
           VerifyField<int32_t>(verifier, VT_OPEN_ISSUES_COUNT) &&
           VerifyField<int32_t>(verifier, VT_FORKS) &&
           VerifyField<int32_t>(verifier, VT_OPEN_ISSUES) &&
           VerifyField<int32_t>(verifier, VT_WATCHERS) &&
           VerifyOffset(verifier, VT_DEFAULT_BRANCH) &&
           verifier.Verify(default_branch()) &&
           verifier.EndTable();
  }
};

struct RepoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(Repo::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Repo::VT_NAME, name);
  }
  void add_full_name(flatbuffers::Offset<flatbuffers::String> full_name) {
    fbb_.AddOffset(Repo::VT_FULL_NAME, full_name);
  }
  void add_owner(flatbuffers::Offset<User> owner) {
    fbb_.AddOffset(Repo::VT_OWNER, owner);
  }
  void add_html_url(flatbuffers::Offset<flatbuffers::String> html_url) {
    fbb_.AddOffset(Repo::VT_HTML_URL, html_url);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(Repo::VT_DESCRIPTION, description);
  }
  void add_fork(bool fork) {
    fbb_.AddElement<uint8_t>(Repo::VT_FORK, static_cast<uint8_t>(fork), 0);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(Repo::VT_URL, url);
  }
  void add_created_at(flatbuffers::Offset<flatbuffers::String> created_at) {
    fbb_.AddOffset(Repo::VT_CREATED_AT, created_at);
  }
  void add_updated_at(flatbuffers::Offset<flatbuffers::String> updated_at) {
    fbb_.AddOffset(Repo::VT_UPDATED_AT, updated_at);
  }
  void add_pushed_at(flatbuffers::Offset<flatbuffers::String> pushed_at) {
    fbb_.AddOffset(Repo::VT_PUSHED_AT, pushed_at);
  }
  void add_git_url(flatbuffers::Offset<flatbuffers::String> git_url) {
    fbb_.AddOffset(Repo::VT_GIT_URL, git_url);
  }
  void add_ssh_url(flatbuffers::Offset<flatbuffers::String> ssh_url) {
    fbb_.AddOffset(Repo::VT_SSH_URL, ssh_url);
  }
  void add_clone_url(flatbuffers::Offset<flatbuffers::String> clone_url) {
    fbb_.AddOffset(Repo::VT_CLONE_URL, clone_url);
  }
  void add_svn_url(flatbuffers::Offset<flatbuffers::String> svn_url) {
    fbb_.AddOffset(Repo::VT_SVN_URL, svn_url);
  }
  void add_homepage(flatbuffers::Offset<flatbuffers::String> homepage) {
    fbb_.AddOffset(Repo::VT_HOMEPAGE, homepage);
  }
  void add_size(int64_t size) {
    fbb_.AddElement<int64_t>(Repo::VT_SIZE, size, 0);
  }
  void add_stargazers_count(int32_t stargazers_count) {
    fbb_.AddElement<int32_t>(Repo::VT_STARGAZERS_COUNT, stargazers_count, 0);
  }
  void add_watchers_count(int32_t watchers_count) {
    fbb_.AddElement<int32_t>(Repo::VT_WATCHERS_COUNT, watchers_count, 0);
  }
  void add_language(flatbuffers::Offset<flatbuffers::String> language) {
    fbb_.AddOffset(Repo::VT_LANGUAGE, language);
  }
  void add_has_issues(bool has_issues) {
    fbb_.AddElement<uint8_t>(Repo::VT_HAS_ISSUES, static_cast<uint8_t>(has_issues), 0);
  }
  void add_has_downloads(bool has_downloads) {
    fbb_.AddElement<uint8_t>(Repo::VT_HAS_DOWNLOADS, static_cast<uint8_t>(has_downloads), 0);
  }
  void add_has_wiki(bool has_wiki) {
    fbb_.AddElement<uint8_t>(Repo::VT_HAS_WIKI, static_cast<uint8_t>(has_wiki), 0);
  }
  void add_has_pages(bool has_pages) {
    fbb_.AddElement<uint8_t>(Repo::VT_HAS_PAGES, static_cast<uint8_t>(has_pages), 0);
  }
  void add_forks_count(int32_t forks_count) {
    fbb_.AddElement<int32_t>(Repo::VT_FORKS_COUNT, forks_count, 0);
  }
  void add_mirror_url(flatbuffers::Offset<flatbuffers::String> mirror_url) {
    fbb_.AddOffset(Repo::VT_MIRROR_URL, mirror_url);
  }
  void add_open_issues_count(int32_t open_issues_count) {
    fbb_.AddElement<int32_t>(Repo::VT_OPEN_ISSUES_COUNT, open_issues_count, 0);
  }
  void add_forks(int32_t forks) {
    fbb_.AddElement<int32_t>(Repo::VT_FORKS, forks, 0);
  }
  void add_open_issues(int32_t open_issues) {
    fbb_.AddElement<int32_t>(Repo::VT_OPEN_ISSUES, open_issues, 0);
  }
  void add_watchers(int32_t watchers) {
    fbb_.AddElement<int32_t>(Repo::VT_WATCHERS, watchers, 0);
  }
  void add_default_branch(flatbuffers::Offset<flatbuffers::String> default_branch) {
    fbb_.AddOffset(Repo::VT_DEFAULT_BRANCH, default_branch);
  }
  explicit RepoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RepoBuilder &operator=(const RepoBuilder &);
  flatbuffers::Offset<Repo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Repo>(end);
    return o;
  }
};

inline flatbuffers::Offset<Repo> CreateRepo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> full_name = 0,
    flatbuffers::Offset<User> owner = 0,
    flatbuffers::Offset<flatbuffers::String> html_url = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    bool fork = false,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<flatbuffers::String> created_at = 0,
    flatbuffers::Offset<flatbuffers::String> updated_at = 0,
    flatbuffers::Offset<flatbuffers::String> pushed_at = 0,
    flatbuffers::Offset<flatbuffers::String> git_url = 0,
    flatbuffers::Offset<flatbuffers::String> ssh_url = 0,
    flatbuffers::Offset<flatbuffers::String> clone_url = 0,
    flatbuffers::Offset<flatbuffers::String> svn_url = 0,
    flatbuffers::Offset<flatbuffers::String> homepage = 0,
    int64_t size = 0,
    int32_t stargazers_count = 0,
    int32_t watchers_count = 0,
    flatbuffers::Offset<flatbuffers::String> language = 0,
    bool has_issues = false,
    bool has_downloads = false,
    bool has_wiki = false,
    bool has_pages = false,
    int32_t forks_count = 0,
    flatbuffers::Offset<flatbuffers::String> mirror_url = 0,
    int32_t open_issues_count = 0,
    int32_t forks = 0,
    int32_t open_issues = 0,
    int32_t watchers = 0,
    flatbuffers::Offset<flatbuffers::String> default_branch = 0) {
  RepoBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_id(id);
  builder_.add_default_branch(default_branch);
  builder_.add_watchers(watchers);
  builder_.add_open_issues(open_issues);
  builder_.add_forks(forks);
  builder_.add_open_issues_count(open_issues_count);
  builder_.add_mirror_url(mirror_url);
  builder_.add_forks_count(forks_count);
  builder_.add_language(language);
  builder_.add_watchers_count(watchers_count);
  builder_.add_stargazers_count(stargazers_count);
  builder_.add_homepage(homepage);
  builder_.add_svn_url(svn_url);
  builder_.add_clone_url(clone_url);
  builder_.add_ssh_url(ssh_url);
  builder_.add_git_url(git_url);
  builder_.add_pushed_at(pushed_at);
  builder_.add_updated_at(updated_at);
  builder_.add_created_at(created_at);
  builder_.add_url(url);
  builder_.add_description(description);
  builder_.add_html_url(html_url);
  builder_.add_owner(owner);
  builder_.add_full_name(full_name);
  builder_.add_name(name);
  builder_.add_has_pages(has_pages);
  builder_.add_has_wiki(has_wiki);
  builder_.add_has_downloads(has_downloads);
  builder_.add_has_issues(has_issues);
  builder_.add_fork(fork);
  return builder_.Finish();
}

inline flatbuffers::Offset<Repo> CreateRepoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const char *name = nullptr,
    const char *full_name = nullptr,
    flatbuffers::Offset<User> owner = 0,
    const char *html_url = nullptr,
    const char *description = nullptr,
    bool fork = false,
    const char *url = nullptr,
    const char *created_at = nullptr,
    const char *updated_at = nullptr,
    const char *pushed_at = nullptr,
    const char *git_url = nullptr,
    const char *ssh_url = nullptr,
    const char *clone_url = nullptr,
    const char *svn_url = nullptr,
    const char *homepage = nullptr,
    int64_t size = 0,
    int32_t stargazers_count = 0,
    int32_t watchers_count = 0,
    const char *language = nullptr,
    bool has_issues = false,
    bool has_downloads = false,
    bool has_wiki = false,
    bool has_pages = false,
    int32_t forks_count = 0,
    const char *mirror_url = nullptr,
    int32_t open_issues_count = 0,
    int32_t forks = 0,
    int32_t open_issues = 0,
    int32_t watchers = 0,
    const char *default_branch = nullptr) {
  return Repos::CreateRepo(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      full_name ? _fbb.CreateString(full_name) : 0,
      owner,
      html_url ? _fbb.CreateString(html_url) : 0,
      description ? _fbb.CreateString(description) : 0,
      fork,
      url ? _fbb.CreateString(url) : 0,
      created_at ? _fbb.CreateString(created_at) : 0,
      updated_at ? _fbb.CreateString(updated_at) : 0,
      pushed_at ? _fbb.CreateString(pushed_at) : 0,
      git_url ? _fbb.CreateString(git_url) : 0,
      ssh_url ? _fbb.CreateString(ssh_url) : 0,
      clone_url ? _fbb.CreateString(clone_url) : 0,
      svn_url ? _fbb.CreateString(svn_url) : 0,
      homepage ? _fbb.CreateString(homepage) : 0,
      size,
      stargazers_count,
      watchers_count,
      language ? _fbb.CreateString(language) : 0,
      has_issues,
      has_downloads,
      has_wiki,
      has_pages,
      forks_count,
      mirror_url ? _fbb.CreateString(mirror_url) : 0,
      open_issues_count,
      forks,
      open_issues,
      watchers,
      default_branch ? _fbb.CreateString(default_branch) : 0);
}

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LOGIN = 4,
    VT_ID = 6,
    VT_AVATAR_URL = 8,
    VT_GRAVATAR_ID = 10,
    VT_URL = 12,
    VT_HTML_URL = 14,
    VT_FOLLOWERS_URL = 16,
    VT_FOLLOWING_URL = 18,
    VT_GISTS_URL = 20,
    VT_STARRED_URL = 22,
    VT_SUBSCRIPTIONS_URL = 24,
    VT_ORGANIZATIONS_URL = 26,
    VT_REPOS_URL = 28,
    VT_EVENTS_URL = 30,
    VT_RECEIVED_EVENTS_URL = 32,
    VT_TYPE = 34,
    VT_SITE_ADMIN = 36
  };
  const flatbuffers::String *login() const {
    return GetPointer<const flatbuffers::String *>(VT_LOGIN);
  }
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const flatbuffers::String *avatar_url() const {
    return GetPointer<const flatbuffers::String *>(VT_AVATAR_URL);
  }
  const flatbuffers::String *gravatar_id() const {
    return GetPointer<const flatbuffers::String *>(VT_GRAVATAR_ID);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  const flatbuffers::String *html_url() const {
    return GetPointer<const flatbuffers::String *>(VT_HTML_URL);
  }
  const flatbuffers::String *followers_url() const {
    return GetPointer<const flatbuffers::String *>(VT_FOLLOWERS_URL);
  }
  const flatbuffers::String *following_url() const {
    return GetPointer<const flatbuffers::String *>(VT_FOLLOWING_URL);
  }
  const flatbuffers::String *gists_url() const {
    return GetPointer<const flatbuffers::String *>(VT_GISTS_URL);
  }
  const flatbuffers::String *starred_url() const {
    return GetPointer<const flatbuffers::String *>(VT_STARRED_URL);
  }
  const flatbuffers::String *subscriptions_url() const {
    return GetPointer<const flatbuffers::String *>(VT_SUBSCRIPTIONS_URL);
  }
  const flatbuffers::String *organizations_url() const {
    return GetPointer<const flatbuffers::String *>(VT_ORGANIZATIONS_URL);
  }
  const flatbuffers::String *repos_url() const {
    return GetPointer<const flatbuffers::String *>(VT_REPOS_URL);
  }
  const flatbuffers::String *events_url() const {
    return GetPointer<const flatbuffers::String *>(VT_EVENTS_URL);
  }
  const flatbuffers::String *received_events_url() const {
    return GetPointer<const flatbuffers::String *>(VT_RECEIVED_EVENTS_URL);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  bool site_admin() const {
    return GetField<uint8_t>(VT_SITE_ADMIN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOGIN) &&
           verifier.Verify(login()) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_AVATAR_URL) &&
           verifier.Verify(avatar_url()) &&
           VerifyOffset(verifier, VT_GRAVATAR_ID) &&
           verifier.Verify(gravatar_id()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.Verify(url()) &&
           VerifyOffset(verifier, VT_HTML_URL) &&
           verifier.Verify(html_url()) &&
           VerifyOffset(verifier, VT_FOLLOWERS_URL) &&
           verifier.Verify(followers_url()) &&
           VerifyOffset(verifier, VT_FOLLOWING_URL) &&
           verifier.Verify(following_url()) &&
           VerifyOffset(verifier, VT_GISTS_URL) &&
           verifier.Verify(gists_url()) &&
           VerifyOffset(verifier, VT_STARRED_URL) &&
           verifier.Verify(starred_url()) &&
           VerifyOffset(verifier, VT_SUBSCRIPTIONS_URL) &&
           verifier.Verify(subscriptions_url()) &&
           VerifyOffset(verifier, VT_ORGANIZATIONS_URL) &&
           verifier.Verify(organizations_url()) &&
           VerifyOffset(verifier, VT_REPOS_URL) &&
           verifier.Verify(repos_url()) &&
           VerifyOffset(verifier, VT_EVENTS_URL) &&
           verifier.Verify(events_url()) &&
           VerifyOffset(verifier, VT_RECEIVED_EVENTS_URL) &&
           verifier.Verify(received_events_url()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.Verify(type()) &&
           VerifyField<uint8_t>(verifier, VT_SITE_ADMIN) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_login(flatbuffers::Offset<flatbuffers::String> login) {
    fbb_.AddOffset(User::VT_LOGIN, login);
  }
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(User::VT_ID, id, 0);
  }
  void add_avatar_url(flatbuffers::Offset<flatbuffers::String> avatar_url) {
    fbb_.AddOffset(User::VT_AVATAR_URL, avatar_url);
  }
  void add_gravatar_id(flatbuffers::Offset<flatbuffers::String> gravatar_id) {
    fbb_.AddOffset(User::VT_GRAVATAR_ID, gravatar_id);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(User::VT_URL, url);
  }
  void add_html_url(flatbuffers::Offset<flatbuffers::String> html_url) {
    fbb_.AddOffset(User::VT_HTML_URL, html_url);
  }
  void add_followers_url(flatbuffers::Offset<flatbuffers::String> followers_url) {
    fbb_.AddOffset(User::VT_FOLLOWERS_URL, followers_url);
  }
  void add_following_url(flatbuffers::Offset<flatbuffers::String> following_url) {
    fbb_.AddOffset(User::VT_FOLLOWING_URL, following_url);
  }
  void add_gists_url(flatbuffers::Offset<flatbuffers::String> gists_url) {
    fbb_.AddOffset(User::VT_GISTS_URL, gists_url);
  }
  void add_starred_url(flatbuffers::Offset<flatbuffers::String> starred_url) {
    fbb_.AddOffset(User::VT_STARRED_URL, starred_url);
  }
  void add_subscriptions_url(flatbuffers::Offset<flatbuffers::String> subscriptions_url) {
    fbb_.AddOffset(User::VT_SUBSCRIPTIONS_URL, subscriptions_url);
  }
  void add_organizations_url(flatbuffers::Offset<flatbuffers::String> organizations_url) {
    fbb_.AddOffset(User::VT_ORGANIZATIONS_URL, organizations_url);
  }
  void add_repos_url(flatbuffers::Offset<flatbuffers::String> repos_url) {
    fbb_.AddOffset(User::VT_REPOS_URL, repos_url);
  }
  void add_events_url(flatbuffers::Offset<flatbuffers::String> events_url) {
    fbb_.AddOffset(User::VT_EVENTS_URL, events_url);
  }
  void add_received_events_url(flatbuffers::Offset<flatbuffers::String> received_events_url) {
    fbb_.AddOffset(User::VT_RECEIVED_EVENTS_URL, received_events_url);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(User::VT_TYPE, type);
  }
  void add_site_admin(bool site_admin) {
    fbb_.AddElement<uint8_t>(User::VT_SITE_ADMIN, static_cast<uint8_t>(site_admin), 0);
  }
  explicit UserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserBuilder &operator=(const UserBuilder &);
  flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<User>(end);
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> login = 0,
    int64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> avatar_url = 0,
    flatbuffers::Offset<flatbuffers::String> gravatar_id = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<flatbuffers::String> html_url = 0,
    flatbuffers::Offset<flatbuffers::String> followers_url = 0,
    flatbuffers::Offset<flatbuffers::String> following_url = 0,
    flatbuffers::Offset<flatbuffers::String> gists_url = 0,
    flatbuffers::Offset<flatbuffers::String> starred_url = 0,
    flatbuffers::Offset<flatbuffers::String> subscriptions_url = 0,
    flatbuffers::Offset<flatbuffers::String> organizations_url = 0,
    flatbuffers::Offset<flatbuffers::String> repos_url = 0,
    flatbuffers::Offset<flatbuffers::String> events_url = 0,
    flatbuffers::Offset<flatbuffers::String> received_events_url = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    bool site_admin = false) {
  UserBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_type(type);
  builder_.add_received_events_url(received_events_url);
  builder_.add_events_url(events_url);
  builder_.add_repos_url(repos_url);
  builder_.add_organizations_url(organizations_url);
  builder_.add_subscriptions_url(subscriptions_url);
  builder_.add_starred_url(starred_url);
  builder_.add_gists_url(gists_url);
  builder_.add_following_url(following_url);
  builder_.add_followers_url(followers_url);
  builder_.add_html_url(html_url);
  builder_.add_url(url);
  builder_.add_gravatar_id(gravatar_id);
  builder_.add_avatar_url(avatar_url);
  builder_.add_login(login);
  builder_.add_site_admin(site_admin);
  return builder_.Finish();
}

inline flatbuffers::Offset<User> CreateUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *login = nullptr,
    int64_t id = 0,
    const char *avatar_url = nullptr,
    const char *gravatar_id = nullptr,
    const char *url = nullptr,
    const char *html_url = nullptr,
    const char *followers_url = nullptr,
    const char *following_url = nullptr,
    const char *gists_url = nullptr,
    const char *starred_url = nullptr,
    const char *subscriptions_url = nullptr,
    const char *organizations_url = nullptr,
    const char *repos_url = nullptr,
    const char *events_url = nullptr,
    const char *received_events_url = nullptr,
    const char *type = nullptr,
    bool site_admin = false) {
  return Repos::CreateUser(
      _fbb,
      login ? _fbb.CreateString(login) : 0,
      id,
      avatar_url ? _fbb.CreateString(avatar_url) : 0,
      gravatar_id ? _fbb.CreateString(gravatar_id) : 0,
      url ? _fbb.CreateString(url) : 0,
      html_url ? _fbb.CreateString(html_url) : 0,
      followers_url ? _fbb.CreateString(followers_url) : 0,
      following_url ? _fbb.CreateString(following_url) : 0,
      gists_url ? _fbb.CreateString(gists_url) : 0,
      starred_url ? _fbb.CreateString(starred_url) : 0,
      subscriptions_url ? _fbb.CreateString(subscriptions_url) : 0,
      organizations_url ? _fbb.CreateString(organizations_url) : 0,
      repos_url ? _fbb.CreateString(repos_url) : 0,
      events_url ? _fbb.CreateString(events_url) : 0,
      received_events_url ? _fbb.CreateString(received_events_url) : 0,
      type ? _fbb.CreateString(type) : 0,
      site_admin);
}

inline const Repos::ReposList *GetReposList(const void *buf) {
  return flatbuffers::GetRoot<Repos::ReposList>(buf);
}

inline bool VerifyReposListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Repos::ReposList>(nullptr);
}

inline void FinishReposListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Repos::ReposList> root) {
  fbb.Finish(root);
}

}  // namespace Repos

#endif  // FLATBUFFERS_GENERATED_REPOSSCHEMA_REPOS_H_
